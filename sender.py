#!/usr/bin/python
import os
from random import randint
from scapy.all import *
from subprocess import Popen, PIPE


def command(x):
    return str(Popen(x.split(' '), stdout=PIPE).communicate()[0])


def raw_http(src, dst, request="GET /\r\n", sport=10000, dport=80):
    # Drop packets generated by OS related to our connection (To avoid connection reset)
    command("iptables -A OUTPUT -s %s -d %s -p tcp --sport %d --dport %d -j DROP" % (src, dst, sport, dport))

    try:
        data = {}

        ip = IP(src=src, dst=dst)
        seq = randint(10, 100) * 1000 # zero-ended for simplicity in debug time

        SYN=TCP(sport=sport, dport=dport, flags="S", seq=seq)
        SYNACK = sr1(ip/SYN)
        my_ack = SYNACK.seq + 1
        seq += 1

        send(ip/TCP(sport=sport, dport=dport, flags="A", seq=seq, ack=my_ack))

        payload = Raw(request)
        PUSH=TCP(sport=sport, dport=dport, flags="PA", seq=seq, ack=my_ack)
        seq += 1 + len(payload)
        pkt = sr1(ip/PUSH/payload)

        def process(pkt):
            tcp = pkt.payload
            while (not isinstance(tcp, NoPayload)) and (tcp.name != 'TCP'):
                tcp = tcp.payload
            if isinstance(tcp, NoPayload): return
            if tcp.dport != sport or tcp.sport != dport: return

            data[tcp.seq] = tcp.payload
            my_ack = tcp.seq + len(tcp.payload)
            flags = "A"
            if tcp.flags % 2 == 1:
                flags = "FA"
            pkt_to_send = ip/TCP(sport=sport, dport=dport, flags=flags, seq=seq, ack=my_ack)
            send(pkt_to_send)

            return pkt.summary() + "\n ---> " + pkt_to_send.summary()

        sniffed = sniff(prn=process, timeout=20, filter="tcp and host %s and port %d" % (dst, sport))

        return data, sniffed

    finally:
        # Undo
        command("iptables -D OUTPUT -s %s -d %s -p tcp --sport %d --dport %d -j DROP" % (src, dst, sport, dport))


def reset(src, dst, sport=10000, dport=80):
    send(IP(src=src, dst=dst)/TCP(sport=sport, dport=dport, flags="R"))


def combine(data):
    res = ""
    keys = sorted(data.keys())
    pre_k = None
    for k in keys:
        res += str(data[k])
        if pre_k and k - pre_k != len(data[k]):
            print "Lost packet between %d and %d" % (pre_k, k)
        pre_k = k
    return res


SAMPLE_GET_REQUEST = """GET / HTTP/1.1\r
Host: %s\r
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.23) Gecko/20110921 Ubuntu/10.04 (lucid) Firefox/3.6.23\r
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r
Accept-Language: en-us,en;q=0.5\r
Accept-Encoding: identity\r
Accept-Charset: UTF-8,*\r
Connection: close\r
\r
"""

# raw_http("192.168.1.51", "192.168.1.1")


